<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="gen.cs" #>
<#@ include file="..\..\..\Includes\ConfigurationAccessor.tt" #>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Net;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Web;
using VHA.ServiceFoundation;
using VHA.ServiceFoundation.Orchestrations;
using VHA.ServiceFoundation.ServiceModel.Web;
using VHA.ServiceFoundation.ExceptionManagement;
using <#=Model.MessagesNamespace#>.<#=Model.EntityName#>;

namespace Services
{
    public partial class Rest<#=Model.EntityName#>Service : IRest<#=Model.EntityName#>Service
    {
        #region IRest<#=Model.EntityName#>Service Implementation

        public <#=Model.EntityName#>GetAllResponse GetAll()
        {
            var request = new <#=Model.EntityName#>GetAllRequest();

            var executor = OrchestrationExecutorFactory
                .CreateExecutor<<#=Model.EntityName#>GetAllRequest, <#=Model.EntityName#>GetAllResponse>
                (entityName: "<#=Model.EntityName#>", operationName: "GetAll");

            return executor.ExecuteRest(request);
        }

        public <#=Model.EntityName#>GetWithCriteriaResponse GetWithCriteria(
            int pageNumber,
            int pageSize,
            string filterFieldName,
            string filterFieldValue,
            string sortFieldName,
            string sortDirection)
        {
            var request = new <#=Model.EntityName#>GetWithCriteriaRequest
                {   
                    Criteria =
                        Criteria.FromQueryString(HttpContext.Current.Request.QueryString, "<#=Model.EntityName#>Id")
                };

            var executor = OrchestrationExecutorFactory
                .CreateExecutor<<#=Model.EntityName#>GetWithCriteriaRequest, <#=Model.EntityName#>GetWithCriteriaResponse>
                (entityName: "<#=Model.EntityName#>", operationName: "GetWithCriteria");

            return executor.ExecuteRest(request);
        }

        public <#=Model.EntityName#>GetByIdResponse GetById(string id)
        {
            int requestedId;
            if (!Int32.TryParse(id, out requestedId))
                throw new FaultException<ServiceValidationFault>(
                    new ServiceValidationFault("Provided Id must be an integer."));

            var request = new <#=Model.EntityName#>GetByIdRequest { Id = requestedId };

            var executor = OrchestrationExecutorFactory
                .CreateExecutor<<#=Model.EntityName#>GetByIdRequest, <#=Model.EntityName#>GetByIdResponse>
                (entityName: "<#=Model.EntityName#>", operationName: "GetById");

            return executor.ExecuteRest(request);
        }

        public <#=Model.EntityName#>DeleteResponse Delete(<#=Model.EntityName#>DeleteRequest request)
        {
            var executor = OrchestrationExecutorFactory
                .CreateExecutor<<#=Model.EntityName#>DeleteRequest, <#=Model.EntityName#>DeleteResponse>
                (entityName: "<#=Model.EntityName#>", operationName: "Delete");

            return executor.ExecuteRest(request);

        }

        public <#=Model.EntityName#>AddOrUpdateResponse Add(<#=Model.EntityName#>AddOrUpdateRequest request)
        {
            foreach (var entity in request.Entities)
                entity.<#=Model.EntityName#>Id = 0;

            var executor = OrchestrationExecutorFactory
                .CreateExecutor<<#=Model.EntityName#>AddOrUpdateRequest, <#=Model.EntityName#>AddOrUpdateResponse>
                (entityName: "<#=Model.EntityName#>", operationName: "AddOrUpdate");

            return executor.ExecuteRest(request, true);
        }

        public <#=Model.EntityName#>AddOrUpdateResponse Update(<#=Model.EntityName#>AddOrUpdateRequest request)
        {
            var executor = OrchestrationExecutorFactory
                .CreateExecutor<<#=Model.EntityName#>AddOrUpdateRequest, <#=Model.EntityName#>AddOrUpdateResponse>
                (entityName: "<#=Model.EntityName#>", operationName: "AddOrUpdate");

            return executor.ExecuteRest(request, true);
        } 
        #endregion
    }
}
