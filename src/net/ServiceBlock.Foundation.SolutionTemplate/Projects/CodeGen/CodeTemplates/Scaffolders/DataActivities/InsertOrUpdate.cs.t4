<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="gen.cs" #>
<#@ include file="..\..\..\Includes\ConfigurationAccessor.tt" #>
<#@ include file="..\..\..\Includes\ModelProperties.tt" #>
<# var modelDataType = (EnvDTE.CodeType) Model.Entity; #>
<# var properties = GetModelProperties(modelDataType, false); #>
using System;
using System.Activities;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.Text;
using System.Threading.Tasks;
using VHA.ServiceFoundation;
using VHA.ServiceFoundation.Activities;
using VHA.ServiceFoundation.Data;
using <#=Model.EntityNamespace#>;

namespace <#=Model.Namespace#>.<#=Model.EntityName#>
{
    public sealed class InsertOrUpdate : DataActivityBase<<#=Model.EntityNamespace#>.<#=Model.EntityName#>>
    {
        [RequiredArgument]
        public InArgument<<#=Model.EntityNamespace#>.<#=Model.EntityName#>> Entity { get; set; }

        protected override void Execute(NativeActivityContext context)
        {
            var entity = Entity.Get(context);
            var dataContext = base.GetUnitOfWork<<#=Model.UoWInterfaceName#>>(context);

            <#=Model.EntityNamespace#>.<#=Model.EntityName#> toReturn;

            if (entity.<#=Model.PrimaryKey#> == 0)
            { // Insert
                toReturn = dataContext.Insert(entity);
            }
            else
            { // Update
                dataContext.Update<<#=Model.EntityNamespace#>.<#=Model.EntityName#>,dynamic>(
                    u => u.<#=Model.PrimaryKey#> == entity.<#=Model.PrimaryKey#>,
                    s => new
                    {   
				<# foreach (var prop in properties)
					{ if (prop.Name != Model.PrimaryKey) {
				#>
					<#= prop.Name #> = entity.<#= prop.Name #>,
				<#
					} }
				#>      
                    });

                toReturn = entity;
            }

            Result.Set(context, entity);
        }
    }
}
