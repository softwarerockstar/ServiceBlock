<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="config" #>
<#@ include file="..\..\..\Includes\ConfigurationAccessor.tt" #>
<configuration>
  <configSections>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="validation" type="Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationSettings, Microsoft.Practices.EnterpriseLibrary.Validation, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true" />
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true" />
    <section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" requirePermission="true" />
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
  </configSections>
  <validation>
  </validation>
  <loggingConfiguration name="" tracingEnabled="true" defaultCategory="General">
    <listeners>
      <add name="Event Log Listener" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        source="<#=Model.ServiceNamespace#>" formatter="Text Formatter"
        log="" machineName="." traceOutputOptions="None" />
      <add listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.SystemDiagnosticsTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        type="System.Diagnostics.XmlWriterTraceListener, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        traceOutputOptions="Callstack" name="System Diagnostics Trace Listener"
        initializeData=".\logs\AllListener.svclog" />
    </listeners>
    <formatters>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        template="Timestamp: {timestamp}{newline}&#xA;Message: {message}{newline}&#xA;Category: {category}{newline}&#xA;Priority: {priority}{newline}&#xA;EventId: {eventid}{newline}&#xA;Severity: {severity}{newline}&#xA;Title:{title}{newline}&#xA;Machine: {localMachine}{newline}&#xA;App Domain: {localAppDomain}{newline}&#xA;ProcessId: {localProcessId}{newline}&#xA;Process Name: {localProcessName}{newline}&#xA;Thread Name: {threadName}{newline}&#xA;Win32 ThreadId:{win32ThreadId}{newline}&#xA;Extended Properties: {dictionary({key} - {value}{newline})}"
        name="Text Formatter" />
    </formatters>
    <categorySources>
      <add switchValue="All" name="General">
        <listeners>
          <add name="Event Log Listener" />
        </listeners>
      </add>
    </categorySources>
    <specialSources>
      <allEvents switchValue="All" name="All Events">
        <listeners>
          <add name="System Diagnostics Trace Listener" />
        </listeners>
      </allEvents>
      <notProcessed switchValue="All" name="Unprocessed Category" />
      <errors switchValue="All" name="Logging Errors &amp; Warnings">
        <listeners>
          <add name="Event Log Listener" />
        </listeners>
      </errors>
    </specialSources>
  </loggingConfiguration>
  <exceptionHandling>
    <exceptionPolicies>
      <add name="WCF Exception Shielding">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
            postHandlingAction="ThrowNewException">
            <exceptionHandlers>
              <add name="Logging Exception Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                logCategory="General" eventId="100" severity="Error" title="Service Layer Exception"
                formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                priority="0" />
              <add type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF, Version=5.0.505.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                exceptionMessage="Oops!  Your last operation failed!" faultContractType="VHA.ServiceFoundation.ExceptionManagement.BusinessServiceFault, VHA.ServiceFoundation"
                name="Fault Contract Exception Handler">
                <mappings>
                  <add source="{Guid}" name="ErrorID" />
                </mappings>
              </add>
            </exceptionHandlers>
          </add>
          <add name="FaultException" type="System.ServiceModel.FaultException, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
            postHandlingAction="None" />
        </exceptionTypes>
      </add>
    </exceptionPolicies>
  </exceptionHandling>
  <appSettings>
    <add key="aspnet:UseTaskFriendlySynchronizationContext" value="true" />
  </appSettings>
  <connectionStrings>
    <add name="DefaultEntityFrameworkDataContext" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=<#=Model.DbName#>;Integrated Security=True;MultipleActiveResultSets=True" providerName="System.Data.SqlClient" />
  </connectionStrings>
  <system.web>
    <compilation debug="true" targetFramework="4.5" />
    <httpRuntime targetFramework="4.5" />
  </system.web>
  <system.serviceModel>
    <diagnostics>
      <messageLogging
           logEntireMessage="true"
           logMalformedMessages="false"
           logMessagesAtServiceLevel="false"
           logMessagesAtTransportLevel="true"
           maxMessagesToLog="3000"
           maxSizeOfMessageToLog="20000"/>
    </diagnostics>
    <behaviors>
      <serviceBehaviors>
        <behavior>
          <!-- To avoid disclosing metadata information, set the values below to false before deployment -->
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true" />
          <!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information -->
          <serviceDebug includeExceptionDetailInFaults="false" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <protocolMapping>
      <add binding="basicHttpsBinding" scheme="https" />
    </protocolMapping>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" multipleSiteBindingsEnabled="true" />
  </system.serviceModel>
  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true" />
    <!--
        To browse web app root directory during debugging, set the value below to true.
        Set to false before deployment to avoid disclosing web app folder information.
      -->
    <directoryBrowse enabled="true" />
  </system.webServer>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
  </entityFramework>
  
  <system.diagnostics>
    <sources>
        <source name="System.ServiceModel" switchValue="Information, ActivityTracing" propagateActivity="true">
          <listeners>
            <!--<add type="System.Diagnostics.DefaultTraceListener" name="DefaultServer" />-->
            <add name="System.ServiceModel" />
          </listeners>
        </source>
      <source name="System.ServiceModel.MessageLogging">
        <listeners>
          <!--<add type="System.Diagnostics.DefaultTraceListener" name="DefaultServer" />-->
          <add name="System.ServiceModel.MessageLogging" />
        </listeners>
      </source>
      <source name="System.Activities" switchValue="Verbose, ActivityTracing" propagateActivity="true">
        <listeners>
          <!--<add type="System.Diagnostics.DefaultTraceListener" name="DefaultServer" />-->
          <add name="System.Activities" />
        </listeners>
      </source>      
    </sources>
    <sharedListeners>
      <add initializeData=".\logs\System.ServiceModel.svclog"
           type="System.Diagnostics.XmlWriterTraceListener"
           name="System.ServiceModel" traceOutputOptions="Callstack" />

      <add initializeData=".\logs\System.System.ServiceModel.MessageLogging.svclog"
           type="System.Diagnostics.XmlWriterTraceListener"
           name="System.ServiceModel.MessageLogging" traceOutputOptions="Callstack" />

      <add initializeData=".\logs\System.Activities.svclog"
           type="System.Diagnostics.XmlWriterTraceListener"
           name="System.Activities" traceOutputOptions="Callstack" />
    </sharedListeners>
    <trace autoflush="true" />
  </system.diagnostics>
  
  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">
    <alias alias="IUnitOfWork" type="VHA.ServiceFoundation.Data.IUnitOfWork, VHA.ServiceFoundation" />    
    <alias alias="<#=Model.UnitOfWorkClassName#>" type="<#=Model.EntityNamespace#>.<#=Model.UnitOfWorkClassName#>, <#=Model.DomainAssemblyName#>" />    
    <alias alias="OrchestrationExecutionOverride" type="VHA.ServiceFoundation.Orchestrations.OrchestrationExecutionOverride, VHA.ServiceFoundation" />
    <alias alias="IChangeNotificationSink" type="VHA.ServiceFoundation.IChangeNotificationSink, VHA.ServiceFoundation" />
    <alias alias="OrchestrationExecutionInfo" type="VHA.ServiceFoundation.Orchestrations.OrchestrationExecutionInfo, VHA.ServiceFoundation" />

    <container name="defaultContainer">
      <register type="IUnitOfWork" mapTo="<#=Model.UnitOfWorkClassName#>">
        <constructor>
          <!-- Either specify name of an app setting or provide the entire connection string -->
          <param name="nameOrConnectionString" value="Name=DefaultEntityFrameworkDataContext" />
        </constructor>
      </register>
      
      <!-- Specify a class that shall receive add/update events -->
      <!--
      <register type="IChangeNotificationSink" mapTo="Fully qualified type name, assembly name of a plugin that implements IChangeNotificationSink" />
      -->
      
      <register type="OrchestrationExecutionInfo">
        <constructor>
          <!-- 
            Name of the default workflow assembly; this assembly should be in the bin folder or GAC and will be used 
            for any types that do not have any overrides specified 
          -->
          <param name="defaultWorkflowAssembly" value="<#=Model.WorkflowAssemblyName#>" />
          
          <!-- Default workflow namespace -->
          <param name="defaultWorkflowNamespace" value="<#=Model.WorkflowNamespace#>" />

          <!-- If enabled, every request will automatically be null validated. -->
          <param name="nullRequestCheckEnabled" value="true" />

          <!-- 
            Any workflow overrides can be specified in the following format; when no overrides are specified, defaults are used automatically
            <param name="overrides">
              <array>
                <value value="entityName=Category; operationName=GetWithCriteria; type=<#=Model.WorkflowNamespace#>.Custom.GetWithCriteria, <#=Model.WorkflowNamespace#>.Custom"/>
                <value value="entityName=Category; operationNameGetAll; type=<#=Model.WorkflowNamespace#>.Custom.GetAll, <#=Model.WorkflowNamespace#>.Custom" />
              </array>
            </param>          
          -->
          <param name="executionOverrides">
            <array>
            </array>
          </param>
        </constructor>
      </register>
    </container>
  </unity>

</configuration>