<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ include file="..\..\..\Includes\ConfigurationAccessor.tt" #>
<#@ include file="..\..\..\Includes\ModelProperties.tt" #>
using System;
using System.Linq;
using System.Threading;
using System.Text;
using System.ServiceModel;
using System.Web.Mvc;
using <#= Model.Namespace #>.<#=Model.EntityName#>Svc;
namespace <#= Model.Namespace #>.Controllers
{
public partial class <#=Model.EntityName#>Controller : Controller
    {
        private readonly <#=Model.EntityName#>ServiceClient _repository;

        public <#=Model.EntityName#>Controller()
        {
            _repository = new <#=Model.EntityName#>ServiceClient();
        }

        public ActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public JsonResult List(
            string filterFieldName = "",
            string filterFieldValue = "", 
            int jtStartIndex = 0, 
            int jtPageSize = 0, 
            string jtSorting = null)
        {
            try
            {
                Thread.Sleep(200);

                Criteria criteria = new Criteria
                {
                    PageSize = jtPageSize,
                    PageNumber = (jtStartIndex / jtPageSize) + 1
                };

                if (!String.IsNullOrEmpty(jtSorting))
                {
                    var sortOptions = jtSorting.Split(' ');

                    criteria.SortFieldName = sortOptions[0];

                    if (sortOptions.Length > 1)
                        criteria.SortDirection = (sortOptions[1] == "ASC") ?
                            SortDirection.Ascending :
                            SortDirection.Descending; 
                }

                if (!String.IsNullOrEmpty(filterFieldValue) && !String.IsNullOrEmpty(filterFieldName))
                {
                    criteria.FilterFieldName = filterFieldName;
                    criteria.FilterFieldValue = filterFieldValue;
                }

                var request = new <#=Model.EntityName#>GetWithCriteriaRequest { Criteria = criteria };

                var response = _repository.GetWithCriteria(request);

                var toReturn = Json(new
                {
                    Result = "OK",
                    Records = response.Result.Body,
                    TotalRecordCount = response.Result.TotalCount 
                });

                return toReturn;
            }
            catch (FaultException<BusinessServiceFault> ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = String.Format("{0}<br/>Details:{1}", ex.Message, ex.Detail.Html)
                });
            }
            catch (FaultException<ServiceValidationFault> ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = String.Format("{0}<br/>Details:{1}", ex.Message, ex.Detail.Html)
                });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = ex.Message
                });
            }
        }

        [HttpPost]
        public JsonResult GetAsOptions()
        {
            try
            {
                var results = _repository.GetAll(new <#=Model.EntityName#>GetAllRequest())
                    .Result
                    .Select(x => new { DisplayText = x.Name, Value = x.<#=Model.EntityName#>ID });

                return Json(new { Result = "OK", Options = results });
            }
            catch (FaultException<BusinessServiceFault> ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = String.Format("{0}<br/>Details:{1}", ex.Message, ex.Detail.Html)
                });
            }
            catch (FaultException<ServiceValidationFault> ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = String.Format("{0}<br/>Details:{1}", ex.Message, ex.Detail.Html)
                });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = ex.Message
                });
            }
        }

        [HttpPost]
        public JsonResult Create(<#=Model.EntityName#> entity)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    var sb = new StringBuilder(@"<p>Please correct the following errors:</p><ul>");
                    var errors = ModelState.Values.SelectMany(v => v.Errors);
                    foreach (var err in errors) sb.AppendFormat("<li>{0}</li>", err.ErrorMessage);
                    sb.Append("</ul>");
                    return Json(new { Result = "ERROR", Message = sb.ToString() });
                }

                var request = new <#=Model.EntityName#>AddOrUpdateRequest { Entities = new <#=Model.EntityName#>[] { entity } };
                var response = _repository.AddOrUpdate(request);
                return Json(new { Result = "OK", Record = response.Result });
            }
            catch (FaultException<BusinessServiceFault> ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = String.Format("{0}<br/>Details:{1}", ex.Message, ex.Detail.Html)
                });
            }
            catch (FaultException<ServiceValidationFault> ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = String.Format("{0}<br/>Details:{1}", ex.Message, ex.Detail.Html)
                });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = ex.Message
                });
            }
        }

        [HttpPost]
        public JsonResult Update(<#=Model.EntityName#> entity)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    var sb = new StringBuilder(@"<p>Please correct the following errors:</p><ul>");
                    var errors = ModelState.Values.SelectMany(v => v.Errors);
                    foreach (var err in errors) sb.AppendFormat("<li>{0}</li>", err.ErrorMessage);
                    sb.Append("</ul>");
                    return Json(new { Result = "ERROR", Message = sb.ToString() });
                }

                var request = new <#=Model.EntityName#>AddOrUpdateRequest { Entities = new <#=Model.EntityName#>[] { entity } };
                 
                var response = _repository.AddOrUpdate(request);
                return Json(new { Result = "OK", Record = response.Result });
            }
            catch (FaultException<BusinessServiceFault> ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = String.Format("{0}<br/>Details:{1}", ex.Message, ex.Detail.Html)
                });
            }
            catch (FaultException<ServiceValidationFault> ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = String.Format("{0}<br/>Details:{1}", ex.Message, ex.Detail.Html)
                });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = ex.Message
                });
            }
        }

        [HttpPost]
        public JsonResult Delete(int id)
        {
            try
            {
                Thread.Sleep(50);
                var request = new <#=Model.EntityName#>DeleteRequest { IdList = new int[] { id } };
                _repository.Delete(request);
                return Json(new { Result = "OK" });
            }
            catch (FaultException<BusinessServiceFault> ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = String.Format("{0}<br/>Details:{1}", ex.Message, ex.Detail.Html)
                });
            }
            catch (FaultException<ServiceValidationFault> ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = String.Format("{0}<br/>Details:{1}", ex.Message, ex.Detail.Html)
                });
            }
            catch (Exception ex)
            {
                return Json(new
                {
                    Result = "ERROR",
                    Message = ex.Message
                });
            }
        }
    }
}
