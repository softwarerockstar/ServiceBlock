<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ include file="..\..\..\Includes\ConfigurationAccessor.tt" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Activities;
using VHA.ServiceFoundation;
using VHA.ServiceFoundation.Activities;
using System.ComponentModel;
using <#=Model.EntityNamespace#>;

namespace <#=Model.Namespace#>.<#=Model.EntityName#>
{
    public sealed partial class GetWithCriteria : DataActivityWithCriteriaBase<<#=Model.EntityNamespace#>.<#=Model.EntityName#>>
    {
        protected override IQueryable<<#=Model.EntityNamespace#>.<#=Model.EntityName#>> GetQuery(NativeActivityContext context)
        {
            var includProperties = IncludeProperties.Get(context);
            var dataContext = base.GetUnitOfWork<<#=Model.UoWInterfaceName#>>(context);
            return dataContext.<#=Model.EntityNamePlural#>
                              .IncludePropertyListCsv(includProperties);
        }
        
        protected override void ExecuteActivity(NativeActivityContext context)
        {
            var dataContext = base.GetUnitOfWork<<#=Model.UoWInterfaceName#>>(context);

            var toReturn = PagingUtility.ExecuteQueryWithCriteria<<#=Model.EntityNamespace#>.<#=Model.EntityName#>>(
                query: base.Query,
                criteria: Criteria.Get(context));

            Result.Set(context, toReturn);
        }
    }
}
